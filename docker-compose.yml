version: "3"
services:
  auth-api:
    build: ./back/auth
    environment:
      - NODE_ENV=prod
      - APP=MyTelegram
      - PORT=5000
      - HOSTNAME=http://localhost:5000
      - APP_SECRET=qsefoiqspdoifpoquisupo32euiqdpoifuqs34efcqsdfqsef
      - MONGOURI=mongodb://mongo:27017/chatapp
      - SENDGRID_API_KEY=
      - FRONTURL=http://localhost:3000
    ports:
      - 5000:5000
    depends_on:
      - mongo

  chat-server:
    build: ./back/chat
    environment:
      - MONGOURI=mongodb://mongo:27017/chatapp
      - RABBITMQURI=amqp://rabbit
      - APP_SECRET=qsefoiqspdoifpoquisupo32euiqdpoifuqs34efcqsdfqsef
      - CORS_RULES=http://localhost:3000
    ports:
      - 8080:8080
    depends_on:
      - mongo
      - rabbit

  front:
    build: ./front
    environment:
      - REACT_APP_CHAT_SERVER_URL=http://localhost:8080
      - REACT_APP_AUTH_API_URL=http://localhost:5000/api
    ports:
      - 3000:3000

  rabbit:
    image: rabbitmq:3.8.11-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-guest}
    ports:
      - 5672:5672  # rabbit server
      - 15672:15672 # web ui

  mongo:
    image: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongodata:/data/db
  
  front-test:
    profiles: ["test"]
    build:
      context: ./front/
      dockerfile: Dockerfile
    environment:
      - REACT_APP_CHAT_SERVER_URL=http://chat-server:8080
      - REACT_APP_AUTH_API_URL=http://auth-api:5000/api

  e2e:
    image: cypress
    build:
      context: ./front/
      dockerfile: Dockerfile.e2e
    profiles: ["test"]
    depends_on:
      - auth-api
      - chat-server
      - front-test
    # note: inside e2e container, the network allows accessing
    # "web" host under name "web"
    # so "curl http://web" would return whatever the webserver
    # in the "web" container is cooking
    # see https://docs.docker.com/compose/networking/
    environment:
      - CYPRESS_baseUrl=http://front-test:3000
    command: npx cypress run
    # mount the host directory e2e/cypress and the file e2e/cypress.json as
    # volumes within the container
    # this means that:
    #  1. anything that Cypress writes to these folders (e.g., screenshots,
    #     videos) appears also on the Docker host's filesystem
    #  2. any change that the developer applies to Cypress files on the host
    #     machine immediately takes effect within the e2e container (no docker
    #     rebuild required).
    volumes:
      - ./front/cypress:/app/cypress
      - ./front/cypress.json:/app/cypress.json

volumes:
  mongodata: